filter(Arabinose == 0.2)
# Separate the data for ara 0.05
data_part_2_notmp <- data_fig_4_notmp %>%
filter(Arabinose == 0.05)
## Subtract the scores (just check that the order is the same)
# Change column names
colnames(data_part_2_notmp) <- c("Position", "WT_Residue", "Residue", "mean_sel_coeff_2", "Arabinose_2")
# Join
data_fig_4_final_notmp <- left_join(x = data_part_1_notmp, y = data_part_2_notmp,
by = c('Position' = 'Position', 'WT_Residue' = 'WT_Residue', 'Residue' = 'Residue')
) %>%
mutate(diffNormScore = mean_sel_coeff_2 - mean_sel_coeff)
# Need to convert to wide formatted data
data_fig_4_final_df_notmp <- data_fig_4_final_notmp %>%
select(-WT_Residue, -Arabinose, -Arabinose_2, -mean_sel_coeff, -mean_sel_coeff_2) %>%
pivot_wider(names_from = Residue, values_from = diffNormScore)
# Need to convert the dataframe to a matrix
data_fig_4_final_notmp <- as.matrix(data_fig_4_final_df_notmp %>% select(-Position))
rownames(data_fig_4_final_notmp) <- data_fig_4_final_df_notmp$Position
# Get a matrix of true/false values for the synonymous codons (I will reuse the)
fig_4_bool_notmp <- data_fig_4_notmp %>%
filter(Arabinose == 0.05) %>%
mutate(WT_check = (WT_Residue == Residue)) %>%
select(-WT_Residue, -Arabinose, -mean_sel_coeff) %>%
pivot_wider(names_from = Residue, values_from = WT_check)
fig_4_bool_final_notmp <- as.matrix(fig_4_bool_notmp %>% select(-Position))
rownames(fig_4_bool_final_notmp) <- fig_4_bool_notmp$Position
# Need to reorder the columns in the matrices
data_fig_4_final_notmp <- data_fig_4_final_notmp[1:nrow(data_fig_4_final_notmp), c(1,7,2,19,11,9,12,3,14,20,6,21,17,18,13,15,8,10,16,4,5)]
fig_4_bool_final_notmp <- fig_4_bool_final_notmp[1:nrow(fig_4_bool_final_notmp), c(1,7,2,19,11,9,12,3,14,20,6,21,17,18,13,15,8,10,16,4,5)]
p_figs23_ara0.05 <- Heatmap(
t(data_fig_4_final_notmp), cluster_columns = F, cluster_rows = F,
col = colorRamp2(breaks = seq(-8, 8, length.out = 7) / 100,
# breaks = seq(-4, 4, length.out = 7) / 100,
colors = rev(brewer.pal(n = 7, name = 'BrBG'))),
show_column_names = T, row_names_side = 'left',
show_heatmap_legend = F,
width=unit(31, 'cm'), height = unit(11.5, 'cm'),
border = T,
row_title = "Residue",
row_title_gp = gpar(fontsize=24, fontface = 'bold'),
row_names_rot = 90,
row_names_centered = T,
row_names_gp = gpar(fontsize=18,fontface='bold'),
column_names_gp = gpar(fontsize=18,fontface='bold'),
# bottom_annotation = ha2,
cell_fun = function(j, i, x, y, w, h, col) { # add text to each grid
if (fig_4_bool_final_notmp[j,i]){
# grid.text('s', x, y)
grid.points(x, y, pch = 19, size = unit(0.75, 'char'))
}
},
heatmap_legend_param = list(
at = c(-8, -4, 0, 4, 8) / 100,
# at = c(-4, -2, 0, 2, 4) / 100,
title = "\u0394s",
title_gp = gpar(fontsize = 16),
legend_height = unit(3.5, "cm"),
legend_width = unit(2, "cm"),
border='black',
lwd=1.7,
labels_gp = gpar(fontsize = 14),
title_position = "leftcenter-rot"
),
column_labels = column_labels
)
p_figs23_ara0.05
### 0.4% arabinose
# Separate the data for ara 0.2
data_part_1_notmp <- data_fig_4_notmp %>%
filter(Arabinose == 0.2)
# Separate the data for ara 0.4
data_part_2_notmp <- data_fig_4_notmp %>%
filter(Arabinose == 0.4)
## Subtract the scores (just check that the order is the same)
# Change column names
colnames(data_part_2_notmp) <- c("Position", "WT_Residue", "Residue", "mean_sel_coeff_2", "Arabinose_2")
# Join
data_fig_4_final_notmp <- left_join(x = data_part_1_notmp, y = data_part_2_notmp,
by = c('Position' = 'Position', 'WT_Residue' = 'WT_Residue', 'Residue' = 'Residue')
) %>%
mutate(diffNormScore = mean_sel_coeff_2 - mean_sel_coeff)
# Need to convert to wide formatted data
data_fig_4_final_df_notmp <- data_fig_4_final_notmp %>%
select(-WT_Residue, -Arabinose, -Arabinose_2, -mean_sel_coeff, -mean_sel_coeff_2) %>%
pivot_wider(names_from = Residue, values_from = diffNormScore)
# Need to convert the dataframe to a matrix
data_fig_4_final_notmp <- as.matrix(data_fig_4_final_df_notmp %>% select(-Position))
# Need to convert the dataframe to a matrix
data_fig_4_final_notmp <- as.matrix(data_fig_4_final_df_notmp %>% select(-Position))
rownames(data_fig_4_final_notmp) <- data_fig_4_final_df_notmp$Position
# Get a matrix of true/false values for the synonymous codons (I will reuse the)
fig_4_bool_notmp <- data_fig_4_notmp %>%
filter(Arabinose == 0.4) %>%
mutate(WT_check = (WT_Residue == Residue)) %>%
select(-WT_Residue, -Arabinose, -mean_sel_coeff) %>%
pivot_wider(names_from = Residue, values_from = WT_check)
fig_4_bool_final_notmp <- as.matrix(fig_4_bool_notmp %>% select(-Position))
rownames(fig_4_bool_final_notmp) <- fig_4_bool_notmp$Position
# Need to reorder the columns in the matrices
data_fig_4_final_notmp <- data_fig_4_final_notmp[1:nrow(data_fig_4_final_notmp), c(1,7,2,19,11,9,12,3,14,20,6,21,17,18,13,15,8,10,16,4,5)]
fig_4_bool_final_notmp <- fig_4_bool_final_notmp[1:nrow(fig_4_bool_final_notmp), c(1,7,2,19,11,9,12,3,14,20,6,21,17,18,13,15,8,10,16,4,5)]
# Prepare the bottom annotation
data_interfaces_final_notmp <- read_delim('Data/Complete_datasets_TMP0_TMP10/data_annotation_2.txt', delim = '\t')
# Prepare the bottom annotation
data_interfaces_final_notmp <- read_delim('Data/data_annotation_2.txt', delim = '\t')
ha2 <- HeatmapAnnotation(
`Dimerization interface` = data_interfaces_final$`A,C`,
`Tetramerization interface` = data_interfaces_final$`A,D`,
`DHF binding` = data_interfaces_final$DHF,
`NADPH binding` = data_interfaces_final$NADPH,
`Catalytic residues` = data_interfaces_final$Cat_residues,
`Disordered region` = data_interfaces_final$Disordered_region,
`Buried residues` = data_interfaces_final$Buried,
show_annotation_name = T,
annotation_name_gp = gpar(fontface = 'bold', fontsize = 24),
simple_anno_size = unit(0.75, 'cm'),
annotation_name_side = 'left',
show_legend = FALSE,
col = list(
`Dimerization interface` = colorRamp2(c(0, 1), c("white", "#009E73")),
`Tetramerization interface` = colorRamp2(c(0, 1), c("white", "#0072B2")),
`DHF binding` = colorRamp2(c(0, 1), c("white", "#E69F00")),
`NADPH binding` = colorRamp2(c(0, 1), c("white", "#D55E00")),
`Catalytic residues` = colorRamp2(c(0, 1), c("white", "#56B4E9")),
`Disordered region` = colorRamp2(c(0, 1), c("white", "#CC79A7")),
`Buried residues` = colorRamp2(c(0, 1), c("white", "#9933ff"))
),
gp = gpar(col = "black")
)
p_figs23_ara0.4 <- Heatmap(
t(data_fig_4_final_notmp), cluster_columns = F, cluster_rows = F,
col = colorRamp2(breaks = seq(-8, 8, length.out = 7) / 100,
colors = rev(brewer.pal(n = 7, name = 'BrBG'))),
show_column_names = T, row_names_side = 'left',
show_heatmap_legend = F,
width=unit(31, 'cm'), height = unit(11.5, 'cm'),
border = T,
row_title = "Residue",
row_title_gp = gpar(fontsize=24, fontface = 'bold'),
row_names_rot = 90,
row_names_centered = T,
row_names_gp = gpar(fontsize=18,fontface='bold'),
column_names_gp = gpar(fontsize=18,fontface='bold'),
bottom_annotation = ha2,
cell_fun = function(j, i, x, y, w, h, col) { # add text to each grid
if (fig_4_bool_final_notmp[j,i]){
grid.points(x, y, pch = 19, size = unit(0.75, 'char'))
}
},
heatmap_legend_param = list(
at = c(-8, -4, 0, 4, 8) / 100,
title = "\u0394s",
title_gp = gpar(fontsize = 16),
legend_height = unit(3.5, "cm"),
legend_width = unit(2, "cm"),
border='black',
lwd=1.7,
labels_gp = gpar(fontsize = 14),
title_position = "leftcenter-rot"
),
column_labels = column_labels
)
p_figs23_ara0.4
## Put the three figures together
ht_list = p_figs23_ara0.01 %v% p_figs23_ara0.025 %v% p_figs23_ara0.05 %v% p_figs23_ara0.4
p_figs23_heatmaps <- grid.grabExpr(
draw(ht_list,
row_title_gp = gpar(fontsize=20, fontface = 'bold'),
ht_gap = unit(1, "cm"))
)
## Arabinose 0.01
text_fig_ara0.01 <- ggplot() +
draw_label(
expression(atop(paste(bold('\u0394'), bolditalic(s[weak]), sep = ''),
paste(bold('('),
bolditalic(s[weak] - s[opt]), bold(')'), sep = ''))),
x = 0.7, y = 0.3,
fontface = 'bold', size = 35, angle = 90, colour = '#fed976') +
theme(axis.line = element_blank())
text_fig_ara0.01
# Arabinose 0.025
text_fig_ara0.025 <- ggplot() + draw_label(
expression(atop(paste(bold('\u0394'), bolditalic(s[subopt]), sep = ''),
paste(bold('('),
bolditalic(s[subopt] - s[opt]), bold(')'), sep = ''))),
x = 0.7, y = 0.4,
fontface = 'bold', size = 35, angle = 90, colour = '#fd8d3c') +
theme(axis.line = element_blank())
text_fig_ara0.025
# Arabinose 0.05
text_fig_ara0.05 <- ggplot() + draw_label(
expression(atop(paste(bold('\u0394'), bolditalic(s[near-opt]), sep = ''),
paste(bold('('),
bolditalic(s[near-opt] - s[opt]), bold(')'), sep = ''))),
x = 0.7, y = 0.4,
fontface = 'bold', size = 35, angle = 90, colour = '#bd0026') +
theme(axis.line = element_blank())
text_fig_ara0.05
# Arabinose 0.4
text_fig_ara0.4 <- ggplot() + draw_label(
expression(atop(paste(bold('\u0394'), bolditalic(s[over]), sep = ''),
paste(bold('('),
bolditalic(s[over] - s[opt]), bold(')'), sep = ''))),
x = 0.7, y = 0.35,
fontface = 'bold', size = 35, angle = 90, colour = 'black') +
theme(axis.line = element_blank())
text_fig_ara0.4
data_fig_3 <- all_data_complete %>% ungroup() %>%
filter(TMP == 0, Timepoint == 10) %>%
select(Position, WT_Residue, Residue, mean_sel_coeff, Arabinose, Secondary_structure, rSASA)
# Separate the data for ara 0.2
data_part_1 <- data_fig_3 %>%
filter(Arabinose == 0.2)
## Separate the data for ara 0.4
data_part_2 <- data_fig_3 %>%
filter(Arabinose == 0.4)
## Subtract the scores (just check that the order is the same)
# Change column names
colnames(data_part_2) <- c("Position", "WT_Residue", "Residue", "mean_sel_coeff_2",
"Arabinose_2", "Secondary_structure", "rSASA")
data_fig_3_final_new <- left_join(x = data_part_1, y = data_part_2,
by = c('Position' = 'Position', 'WT_Residue' = 'WT_Residue',
'Residue' = 'Residue', 'rSASA' = 'rSASA',
'Secondary_structure' = 'Secondary_structure')
) %>%
mutate(diffNormScore = mean_sel_coeff_2 - mean_sel_coeff)
data_fig_3_final_new <- left_join(x = data_part_1, y = data_part_2,
by = c('Position' = 'Position', 'WT_Residue' = 'WT_Residue', 'Residue' = 'Residue',
'rSASA' = 'rSASA', 'Secondary_structure' = 'Secondary_structure')
) %>%
mutate(diffNormScore = mean_sel_coeff_2 - mean_sel_coeff)
# Merge the dataframes
critical_sites_deltaDMS <- left_join(x = data_fig_3_final_new, y = data_interfaces_final,
by = c('Position' = 'Position'))
# Pivot to a longer format
critical_sites_deltaDMS %<>% rowwise() %>% mutate(
`Only NADPH` = ifelse(and(NADPH == 1,
sum(`A,C`, `A,D`, DHF, NADPH, Cat_residues, Buried, Disordered_region) == 1), 1, 0),
Unannotated = ifelse(sum(`A,C`, `A,D`, DHF, NADPH, Cat_residues, Buried, Disordered_region) == 0, 1, 0)
) %>%
pivot_longer(cols = c('A,C', 'A,D', 'DHF', 'NADPH', 'Cat_residues', 'Buried',
'Only NADPH', 'Disordered_region','Unannotated'),
names_to = 'Site', values_to = 'Site_check') %>%
filter(Site_check == 1) %>%
mutate(Site = ifelse(Site == 'A,C', 'Dimerization interface' ,
ifelse(Site == 'A,D', 'Tetramerization interface',
ifelse(Site == 'Cat_residues', 'Catalytic residues',
ifelse(Site == 'Disordered_region', 'Disordered region',
ifelse(Site == 'Buried', 'Buried residues',
ifelse(Site == 'DHF', 'DHF binding',
ifelse(Site == 'NADPH', 'NADPH binding',
Site))))))))
residues_site <- critical_sites_deltaDMS %>% select(Position, Site) %>%
group_by(Site) %>%
summarise(Position = toString(unique(Position)))
# Color for a gradient background
g <- rasterGrob(brewer.pal(n = 7, name = 'BrBG'), width=unit(1,"npc"), height = unit(1,"npc"),
interpolate = TRUE)
# Statistical comparisons
comps <- compare_means(diffNormScore~Site, data = critical_sites_deltaDMS,
paired = F) %>%
mutate(p.format = ifelse(p < 2.2e-16, 'p < 2.2e-16',
ifelse(p > 0.01, str_c('p = ', round(as.numeric(p), 2), sep = ''),
sprintf("p = %2.1e", as.numeric(p)))
)
# y_pos = rep(c(0.6, 0.7, 0.8), 8)
)
p_figs23b <- critical_sites_deltaDMS %>% rowwise() %>%
mutate(mut_id = str_c(WT_Residue, Position, Residue, sep = '')) %>%
filter(Site != 'Only NADPH') %>%
mutate(Site = factor(Site, levels = c('Disordered region', 'Catalytic residues',
'DHF binding', 'NADPH binding',
'Buried residues',
'Tetramerization interface', 'Dimerization interface','Unannotated')
)
) %>%
ggplot(aes(x = Site, y = diffNormScore, colour = Site, fill = Site)) +
annotation_custom(g, xmin=-Inf, xmax=Inf, ymin=-Inf, ymax=Inf) +
scale_colour_manual(values = c('#CC79A7', '#56B4E9', '#E69F00', '#D55E00',
'#9933ff',
'#0072B2', '#009E73',
'#000000')) +
scale_fill_manual(values = c('#CC79A7', '#56B4E9', '#E69F00', '#D55E00',
'#9933ff',
'#0072B2', '#009E73',
'#000000')) +
geom_boxplot(outlier.shape = NA, alpha = 0.3) +
geom_jitter(width = 0.2, alpha = 0.8) +
geom_hline(yintercept = 0, linetype = 'dashed') +
theme(legend.position = 'none',
panel.grid.major = element_line(colour="#8c8c8c", linetype = 'dashed'),
panel.grid.minor = element_blank(),
axis.title.x = element_text(face = 'bold', size = 20),
axis.title.y = element_text(face = 'bold', size = 28),
axis.text.x = element_text(size = 18, angle = 45, hjust = 1),
axis.text.y = element_text(size = 18),
plot.margin = margin(t = 1, r = 5, b = 0, l = 9, 'cm')) +
xlab('') + # ylab('\u0394s') +
# labs(y = expression(s[weak] - s[opt])) +
# labs(y = expression(paste(bold('\u0394'), bolditalic(s[weak]),
#                           bold(' ('), bolditalic(s[weak] - s[opt]), bold(')'),
#                           sep = ''))) +
labs(y = expression(paste(bold('\u0394'), bolditalic(s[over]),
bold(' ('), bolditalic(s[over] - s[opt]), bold(')'),
sep = ''))) +
ylim(-0.08, 0.08) +
# ylim(-0.4, 0.4) +
annotate('text',
x = 3, y = 0.04,
# x = 3, y = 0.2,
# label = 's[weak] > s[opt]',
# label = expression(italic(s[weak] > s[opt])),
label = expression(italic(s[over] > s[opt])),
parse = T, size = 8) +
annotate('text',
x = 3, y = -0.04,
# x = 3, y = -0.2,
# label = 's[weak] < s[opt]',
# label = expression(italic(s[weak] < s[opt])),
label = expression(italic(s[over] < s[opt])),
parse = T, size = 8)
p_figs23b
### Save the text labels and the panels separately
p_figs23_text <- plot_grid(text_fig_ara0.01, text_fig_ara0.025, text_fig_ara0.05, text_fig_ara0.4,
nrow = 4, rel_heights = c(1.1, 1, 1.1, 1))
p_figs23 <- plot_grid(p_figs23_heatmaps,
p_figs23b + theme(plot.margin = margin(t = 1, r = 10, b = 0, l = 14, 'cm')),
nrow = 2, rel_heights = c(4, 1.3),
labels = c('A', 'B'), label_size = 20, label_fontface = 'bold')
p_figs23
## Define function to read plate data
# function to process plates ----------------------------------------------
read.my.gc <- function(file, plate.index){
pl <- read.xlsx(file,sheetIndex = 1, rowIndex = 3:62, stringsAsfactors = FALSE,
header = F)
ind <- read.xlsx(plate.index, sheetIndex = 1, rowIndex = 1:64, header = T)
time <- seq(0,0.30*(ncol(pl)-2), 0.30)
colnames(pl)[1] <- "Well"
colnames(pl)[2:ncol(pl)] <- time
pl %<>% select(1:(ncol(pl)-2))
data.pl <- gather(pl, key = "time", value = "OD",2:ncol(pl), convert = F)
data.pl$time <- as.numeric(data.pl$time)
data.pl$OD <- as.numeric(data.pl$OD)
data.pl %<>% left_join(ind, by = "Well")
# Subtract the blank for this experiment and multiply by 5 to make it OD / mL
# (experiment was carried out in 0.2 mL)
data.pl %<>% mutate(OD = (OD - 0.085) * 5)
d <-  select(data.pl, 1:3)
d %<>% spread(key = "Well", value = "OD", convert = F)
colnames(d)[1] <- "time"
## Use Growthcurver
gc_out <- SummarizeGrowthByPlate(d, t_trim =13.5)
colnames(gc_out)[1] <- "Well"
data.pl %<>% left_join(gc_out, by = "Well")
}
data.od1 <- read.my.gc(file.od, plate.ind)
# Load the growth curves with TMP
plate.ind <- 'Data/Growth_curves/Index_growth_curves_11_05_2022.xlsx'
file.od <- 'Data/Growth_curves/Growth_curves_11_05_2022.xlsx'
## Define function to read plate data
# function to process plates ----------------------------------------------
read.my.gc <- function(file, plate.index){
pl <- read.xlsx(file,sheetIndex = 1, rowIndex = 3:62, stringsAsfactors = FALSE,
header = F)
ind <- read.xlsx(plate.index, sheetIndex = 1, rowIndex = 1:64, header = T)
time <- seq(0,0.30*(ncol(pl)-2), 0.30)
colnames(pl)[1] <- "Well"
colnames(pl)[2:ncol(pl)] <- time
pl %<>% select(1:(ncol(pl)-2))
data.pl <- gather(pl, key = "time", value = "OD",2:ncol(pl), convert = F)
data.pl$time <- as.numeric(data.pl$time)
data.pl$OD <- as.numeric(data.pl$OD)
data.pl %<>% left_join(ind, by = "Well")
# Subtract the blank for this experiment and multiply by 5 to make it OD / mL
# (experiment was carried out in 0.2 mL)
data.pl %<>% mutate(OD = (OD - 0.085) * 5)
d <-  select(data.pl, 1:3)
d %<>% spread(key = "Well", value = "OD", convert = F)
colnames(d)[1] <- "time"
## Use Growthcurver
gc_out <- SummarizeGrowthByPlate(d, t_trim =13.5)
colnames(gc_out)[1] <- "Well"
data.pl %<>% left_join(gc_out, by = "Well")
}
data.od1 <- read.my.gc(file.od, plate.ind)
## Load the data without TMP
plate.ind <- 'Data/Growth_curves/Index_growth_curves_20_05_2022.xlsx'
file.od <- 'Data/Growth_curves/Growth_curves_20_05_2022.xlsx'
read.my.gc <- function(file, plate.index){
pl <- read.xlsx(file,sheetIndex = 1, rowIndex = 3:62, stringsAsfactors = FALSE,
header = F)
ind <- read.xlsx(plate.index, sheetIndex = 1, rowIndex = 1:64, header = T)
time <- seq(0,0.30*(ncol(pl)-2), 0.30)
colnames(pl)[1] <- "Well"
colnames(pl)[2:ncol(pl)] <- time
pl %<>% select(1:(ncol(pl)-2))
data.pl <- gather(pl, key = "time", value = "OD",2:ncol(pl), convert = F)
data.pl$time <- as.numeric(data.pl$time)
data.pl$OD <- as.numeric(data.pl$OD)
data.pl %<>% left_join(ind, by = "Well")
# Subtract the blank for this experiment and multiply by 5 to make it OD / mL
# (experiment was carried out in 0.2 mL)
data.pl %<>% mutate(OD = (OD - 0.089) * 5)
d <-  select(data.pl, 1:3)
d %<>% spread(key = "Well", value = "OD", convert = F)
colnames(d)[1] <- "time"
## Use Growthcurver
gc_out <- SummarizeGrowthByPlate(d, t_trim =13.5)
colnames(gc_out)[1] <- "Well"
data.pl %<>% left_join(gc_out, by = "Well")
}
data.od2 <- read.my.gc(file.od, plate.ind)
# Put the data together
data_figs24 <- bind_rows(data.od1, data.od2)
# Summarise to have only one data point for AUC for each well
data_figs24_summary <- data_figs24 %>% ungroup() %>%
group_by(Well, Arabinose, TMP, Mutant) %>%
summarise(auc = mean(auc_e))
# Summarize to show the average of the three replicates
data_figs24_sum_curves <- data_figs24 %>% ungroup() %>%
group_by(Arabinose, TMP, Mutant, time) %>%
summarise(OD = mean(OD))
# Pivot the area under the curve to calculate the differences
data_figs24_wide <- data_figs24_summary %>% ungroup() %>%
group_by(Well, Arabinose, Mutant) %>%
filter(!(is.na(Mutant))) %>%
pivot_wider(names_from = TMP, values_from = auc, names_prefix = 'AUC_TMP_')
# Calculate the difference between the data with and without TMP
# and then the percentage of growth recovery
data_figs24_wide %<>% mutate(diff_auc = AUC_TMP_10 - AUC_TMP_0)
# Add a column for the maximum difference (0% arabinose)
max_diff <- data_figs24_wide %>% filter(Arabinose == 0) %>% ungroup() %>%
group_by(Arabinose, Mutant) %>%
summarise(max_diff = median(diff_auc))
# Use a join to add the maximum difference
data_figs24_final <- left_join(x = data_figs24_wide,
y = max_diff %>% ungroup() %>% select(-Arabinose),
by = c('Mutant' = 'Mutant'))
data_figs24_final %<>% mutate(pct_recovery = 100 * (1 - (diff_auc / max_diff)))
# Draw the figure
p_figs24a <- data_figs24_final %>%
ggplot(aes(x = as.factor(Arabinose), y = pct_recovery, colour = Mutant)) +
geom_point(position = position_jitterdodge(), size = 3) +
# facet_wrap(~TMP, scales = 'free') +
theme(axis.title = element_text(size = 20, face = 'bold'),
axis.text = element_text(size = 18),
panel.grid.major = element_line(colour="#8c8c8c", linetype = 'dashed'),
panel.grid.minor = element_blank(),
legend.position = 'top',
legend.justification = 'center',
legend.title = element_text(size = 20),
legend.text = element_text(size = 18),
strip.text = element_text(size = 20, face = 'bold'),
strip.background = element_rect(fill = 'white')) +
xlab('Arabinose (% m/v)') + ylab('Recovered growth (%)')
p_figs24a
data_figs24_final_summ <- data_figs24_final %>% ungroup() %>%
group_by(Arabinose, Mutant) %>%
summarise(mean_recovery = mean(pct_recovery),
sem_recovery = sd(pct_recovery) / sqrt(n()),
num_samples = n())
p_figs24a <- data_figs24_final_summ %>%
ggplot(aes(x = as.factor(Arabinose), y = mean_recovery, colour = Mutant,
ymax = mean_recovery + sem_recovery,
ymin = mean_recovery - sem_recovery)) +
geom_point(size = 1.5) +
geom_errorbar(width = 0.2) +
# geom_point(position = position_jitterdodge(), size = 3) +
# facet_wrap(~TMP, scales = 'free') +
theme(axis.title = element_text(size = 20, face = 'bold'),
axis.text = element_text(size = 18),
panel.grid.major = element_line(colour="#8c8c8c", linetype = 'dashed'),
panel.grid.minor = element_blank(),
legend.position = 'top',
legend.justification = 'center',
legend.title = element_text(size = 20),
legend.text = element_text(size = 18),
strip.text = element_text(size = 20, face = 'bold'),
strip.background = element_rect(fill = 'white')) +
xlab('Arabinose (% m/v)') + ylab('Recovered growth (%)')
p_figs24a
# Need to calculate the median growth recovery at 0.001 arabinose
med_opt_E2R <- data_figs24_final %>% ungroup() %>%
filter(Mutant == 'E2R', Arabinose == 0.001) %>%
group_by(Mutant, Arabinose) %>%
summarise(med_recovery = median(pct_recovery))
cost_e2r <-data_figs24_final %>% mutate(opt_recovery = med_opt_E2R$med_recovery[1])
cost_e2r %<>% mutate(cost = opt_recovery - pct_recovery)
p_figs24b <- cost_e2r %>%
filter(Mutant == 'E2R', Arabinose > 0) %>%
ggplot(aes(x = as.factor(Arabinose), y = cost)) +
# geom_point(position = position_jitterdodge(), size = 3) +
geom_jitter(size = 3, width = 0.2) +
stat_summary(fun = mean, colour = 'red') +
stat_summary(fun = mean, geom = 'path',
mapping = aes(group = -1), colour = 'red') +
# facet_wrap(~TMP, scales = 'free') +
theme(axis.title = element_text(size = 20, face = 'bold'),
axis.text = element_text(size = 18),
panel.grid.major = element_line(colour="#8c8c8c", linetype = 'dashed'),
panel.grid.minor = element_blank(),
legend.position = 'top',
legend.justification = 'center',
legend.title = element_text(size = 20),
legend.text = element_text(size = 18),
strip.text = element_text(size = 20, face = 'bold'),
strip.background = element_rect(fill = 'white')) +
xlab('Arabinose (% m/v)') + ylab('E2R expression cost (% recovered growth)')
p_figs24b
p_figs24 <- plot_grid(p_figs24a, p_figs24b, nrow = 2, labels = c('A', 'B'),
label_size = 20, label_fontface = 'bold')
